import datetime
import logging
import os
import random
import re
import time
from typing import List, Optional, Tuple

import telegram
from fastapi import BackgroundTasks, FastAPI, HTTPException
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      ReplyKeyboardMarkup, ReplyKeyboardRemove, Update)
from telegram.ext import (CallbackContext, CallbackQueryHandler,
                          CommandHandler, ContextTypes, ConversationHandler,
                          Filters, MessageHandler, Updater, filters)

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

app = FastAPI(title="Ask Isnad Bot")


@app.on_event("startup")
async def startup_event():
    print('JoinIsnad Server started---- :', datetime.datetime.now())
    global is_task_running
    is_task_running = True
    try:
        main()
        pass
    except telegram.error.Conflict as e:
        print(f"Telegram Conflict Error: {e}")
        raise HTTPException(status_code=500, detail="Internal server error")



# Define a global variable to store the conversation ID counter
conversation_id_counter = 1

# Set to store blocked user chat IDs
blocked_users = set()

# Define conversation states
GET_TWITTER_ACCOUNT, GET_VOICE, BLOCKED = range(3)

# Define a function to start the conversation
def start(update: Update, context: CallbackContext) -> int:
    global conversation_id_counter  # Access the global conversation ID counter

    # Generate a unique ID for the conversation
    context.user_data['conversation_id'] = conversation_id_counter
    conversation_id_counter += 1  # Increment the conversation ID counter

    user = update.message.from_user
    welcome_message =(
        "*ุดูุฑุงู ูุชุทูุนู ูู ุฅุณูุงุฏ* "+"\n"
        " "+"\n"
        "ูุฑุญุจุงู ุจูุ ุฃูุง *ุจูุช ุฅุณูุงุฏ ุงูุฅููุชุฑููู๐ค * ูุงุณุชูุจุงู ุงูุฃุนุถุงุก ุงูุฌุฏุฏ:"+"\n"
        " "+"\n"
        "- ุฃูู ุฎุทูุฉ ููุงูุถูุงู ูู ุงูุงูุถูุงู ููุฌุฑูุจ ุงููุบูู."+"\n"
        "- ุงูุงูุถูุงู ูุฌุฑูุจ ุฅุณูุงุฏ ุจูุณุชูุฒู ูุชุฃูุฏ ุงูู ุดุฎุต ุนุฑุจู ุญููููุ ูุฃู ุจูุฌูููุง ุทูุจุงุช ุงูุถูุงู ูู ุตูุงููุฉ ุจูุณุชุฎุฏููุง ุชุทุจููุงุช ุจุฑูุฌุฉุ ูุจูุญุชุงุฌ ูููุชุฑูุง."+"\n"
        "ูุฐูู ูุทููุจ ููู ุชุจุนุชููุง ููุง ุฑุณุงูุฉ ุตูุชูุฉ (ูููุณ) ุชุญูู ูููุง ุชุญููููุฉ ุงูุณููููุงู ุตูุชูุงู ุฑุฏุงู ุนูู ุงูุฑุณุงูุฉ ููุง."+"\n"
        " "+"\n"
        "-ูุฐู ุฑุณุงูุฉ ุซุงุจุชุฉ ูู ุจูุช ุฅุณูุงุฏ ุ ุณูู ุชุตู ุฅูู ุงูุฃุฏูู ุงููุฎุชุต ููุฑุงุฌุนุชูุง ุซู ุงูุฑุฏ ุนูููุ ููุท ูุณููุญ ุจุฅุฑุณุงู ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ ูู ุงูุฑุฏ."+"\n"
        " "+"\n"
        "ุชุญูุงุชูุงุ ููุฑุญุจุงู ุจู."+"\n"
    )
    # Get the username of the user
    username = update.message.from_user.username
    print('username:',username)
    context.user_data['user_username'] = username
    context.user_data['user_chat_id'] = user.id  # Store user's chat ID
    context.bot.send_message(chat_id=update.effective_chat.id,text=welcome_message,  parse_mode= 'Markdown')
    return GET_VOICE

# Define a function to get the user's email
def get_twitter_account(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    user_twitter_url = update.message.text
    user_chat_id = update.message.chat_id
    twitter_url_pattern = r'^https?://(?:www\.)?(?:twitter\.com|x\.com)/\w+'

    if re.match(twitter_url_pattern, user_twitter_url):

        # Forward the voice message along with the user's chatid to the admin
        conversation_id = context.user_data['conversation_id']
        admin_chat_id = '5614066882'  # Replace with your admin's chat ID
        voice_message_id = context.user_data['voice']['file_id']
        context.user_data['twitter_account'] = user_twitter_url
        user_username = ""
        if context.user_data['user_username']:
            user_username = str(context.user_data['user_username'])
            admin_msg =(
                "<b>ุทูุจ ุนุถููุฉ ุฌุฏูุฏ.</b>"+"\n"
                " "+"\n"
                "<u>ุจูุงูุงุช ุงูุนุถู:</u>"+"\n"
                " "+"\n"
                "ุฑูู ุงูุนุถููุฉ: " + str(conversation_id)+"\n"
                "ุฃูููุช ุชููุฌุฑุงู:"+"\n"
                "@"+user_username+"\n"
                " "+"\n"
                "<a href=\""+context.user_data['twitter_account']+"\">ุฃูููุช ุชููุชุฑ</a>"
                )
        else:
            admin_msg =(
                "<b>ุทูุจ ุนุถููุฉ ุฌุฏูุฏ.</b>"+"\n"
                " "+"\n"
                "<u>ุจูุงูุงุช ุงูุนุถู:</u>"+"\n"
                " "+"\n"
                "ุฑูู ุงูุนุถููุฉ: " + str(conversation_id)+"\n"
                " "+"\n"
                "<a href=\"tg://user?id="+str(context.user_data['user_chat_id'])+"\">ุฃูููุช ุชููุฌุฑุงู</a>"
                " "+"\n"
                "<a href=\""+context.user_data['twitter_account']+"\">ุฃูููุช ุชููุชุฑ</a>"
            )
        context.bot.send_message(admin_chat_id, admin_msg, parse_mode="HTML", disable_web_page_preview=True)
        context.bot.send_message(admin_chat_id, "<b>ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ:</b>" , parse_mode="HTML")
        context.bot.send_voice(admin_chat_id, voice=voice_message_id)
        context.bot.send_message(admin_chat_id, "------------------------------------------" , parse_mode="HTML")
        # Block further messages from the user
        blocked_users.add(user_chat_id)

        thanks_message =(
            "<b>ุทูุจู ููุฏ ุงููุฑุงุฌุนู ูู ุงูุขุฏูู ุงููุฎุชุต</b>"+"\n"
            " "+"\n"
            "ุณุงุนุฏูุง ุจุงูุตุจุฑุ ุณูุฑุฏ ุนููู ุฎูุงู 24 ุณุงุนู ุนูู ุงูุฃูุซุฑ ุฅู ุดุงุก ุงููู"+"\n"
            "ุณูุฑุงุฌุน ุทูุจู ููู ุญุงู ุงูู ุงุฑุณูุช ุญุณุงุจ ุนุจุฑู ุตุญูุญุ ูุงูุฑุณุงูุฉ ุงูุชุฃููุฏูุฉ ุจุดูู ุตุญูุญุ ุณูุชู ูุจูู ุทูุจู."+"\n"
            " "+"\n"
            )
        update.message.reply_text(text=thanks_message, parse_mode= 'HTML')
        time.sleep(1)
        thanks_message=(
            "ููุนุชุฐุฑ ูุชุนุฏุฏ ุงูุฎุทูุงุช ุ ูููู ูุฐุง ูุฃูุงู ุงูุญููุฉ ุ ูุนุฏู ุงูุณูุงุญ ุจุงูุฏุณุงุณ ุตูุงููุฉ ูุญุณุงุจ ุงููููุงุช."+"\n"
            " "+"\n"
            "ู๐ต๐ธ"
            "ููุง ุทูุจ ุฃุฎูุฑ ุนูุฏู ุจุนุฏ ุงูุถูุงูู ููุงุ ุฑุจูุง ุฃุนุทุงููุง ุทุฑููุฉ ูุฅุณูุงุฏ ุงูููุงููุฉ ููุตุฑุฉ ุงููุธูููููุ ูุฃุฎุชุงุฑูุง ูููุณุญ ุนูุง ุงูุนุฌุฒ ูุงูุฎุฐูุงู :"+"\n"
            " "+"\n"
            "<b>\"ูุชููู ููู ุจุดุฏุฉ ุงูู ูุง ุชุชููู ุนู ุชูููุฐ ุงููููุงุชุ ููุง ูุคุซุฑ ุจู ุงูุฅุญุจุงุท ุฃู ุงูุฃูู ุ ููุง ุชุชุฎุงุฐู ุนู ุงุณุชููุงู ุงููููุงุช ููููุงุ ุญุชู ููุชุจ ููุง ุฑุจูุง ุงููุตุฑุ ูููุชุจ ููุง ุฃุฌุฑ ุงููุฌุงูุฏูู ุงููุฑุงุจุทูู\"</b>"+"\n"
            " "+"\n"
            " "+"\n"
            "<b>ุชุฃูุฏ ูู ุนูู ุงุณู ูุณุชุฎุฏู USER NAME ูุญุณุงุจู ูู ุฅุนุฏุงุฏุงุช ุชููุฌุฑุงู </b>"+"\n"
            " "+"\n"
            "ุชุญูุงุชูุง "+"\n"
            "ููุฑุญุจ ุจูู ูู ุฅุณูุงุฏ "+"\n"
        )
        update.message.reply_text(text=thanks_message, parse_mode= 'HTML')

        return BLOCKED
    else:
        update.message.reply_text(
            "ุนููุงู, ูุฑุฌู ุฅุฑุณุงู ุฑุงุจุท ุฃูููุช ุชููุชุฑ ููุท."
        )
        return GET_TWITTER_ACCOUNT

# Define a function to handle messages from blocked users
def blocked_message_handler(update: Update, context: CallbackContext) -> None:
    user_chat_id = update.message.chat_id
    if user_chat_id in blocked_users:
        update.message.reply_text(
            "ุทูุจู ููุฏ ุงููุฑุงุฌุนู ูู ุงูุขุฏูู ุงููุฎุชุต."
        )
    else:
        # Process the message as usual
        pass


# Define a function to get the user's voice message
def get_voice(update: Update, context: CallbackContext) -> int:
    if update.message.voice:
        user = update.message.from_user
        context.user_data['voice'] = update.message.voice

        voice_finished_message =(
        "<b>ูุทููุจ ุงูุขู ุชุนูู ุญุณุงุจ ุนุจุฑู ุนูู ุชููุชุฑ ุจุฃู ุฅููููุุ ุงุฒุงู ุ</b>"+"\n"
        " "+"\n"
        "1- ุชุฎุชุงุฑ ุงุณู ุนุจุฑู ุจุญุฑูู ุนุจุฑูุฉ ุ ูู ุฌูุฌู ุงู ุดุงุช ุฌู ุจู ุชู ุฃู ูููู ุชุฎุชุงุฑ ุฃุณุงูู ุนุจุฑูุฉ ูู ููุง <a href=\'https://docs.google.com/document/d/193Snn-Q268QFRNtKWJy_2WCSMjQ3WqGX3dGSdY0Wdmc/edit?usp=sharing\'>ุงุถุบุท ููุง</a>"+"\n"
        "ููุงุญุธุฉ: ุฃูู ุญุงุฌุฉ ูุงุฒู ุชููู ููุฑุฑ ุงูุงููุช ุจูุช ููุง ููุฏ ูุนูุฑู ูุงูุ ุนุดุงู ุชุจูู ุงููุนูููุงุช ูุชูุงุณูุฉ ๐ "+"\n"
        "ูููู ุงุณู ุจุญุฑูู ุงูุฌููุฒู ุนุงุฏูุ ูุด ุดุฑุท ุนุจุฑูุ ููู ุงูุงุชููู ูุน ุจุนุถ ูููู ุฃูุถู. ู ูููู ูุชุฌุงูุณ ูุน ุงูููุฒุฑููู."+"\n"
        " "+"\n"
        )
        time.sleep(1)
        context.bot.send_message(chat_id=update.effective_chat.id,text=voice_finished_message,  parse_mode= 'HTML', disable_web_page_preview=True)
        voice_finished_message =(
        "2- ุชุฎุชุงุฑ ุตูุฑุฉ ุจุฑููุงูู ุตูููููุฉ (ุณูุฑุด ุฌูุฌู ุนูู ุตูุฑุฉ ููุงุณุจุฉุ ูุง ุชุณุชุฎุฏู ุนูู ุงุณุฑุงุฆูู ุฃุตุจุญ ููุดูู)"+"\n"
        "* ุงูุตูุฑุฉ ุงูุดุฎุตูุฉ: ููุถู ุชููู ูุดุฎุต ุนุงุฏู ุญุชู ูู ูู ุจุนูุฏ ูุงูููุงูุญ ูุด ุธุงูุฑุฉุ ู ุฏู ูููู ุชุฌูุจูุง ูู ุงูููุณุจูู ุนูุฏูู. "+"\n"
        "* ุตูุฑุฉ ุงูุฎูููุฉ: ููุถู ุชููู ุจุชุนุจุฑ ุนู ุงุชุฌุงู ูุงุ ูุด ูุฌุฑุฏ ุตูุฑุฉ ุนุดูุงุฆูุฉ. "+"\n"
        " "+"\n"
        )
        context.bot.send_message(chat_id=update.effective_chat.id,text=voice_finished_message,  parse_mode= 'Markdown')
        time.sleep(1)
        voice_finished_message =(
        "3- ูููุฒุฑููู ุชููุชุฑ ูููู ุฑููุฒ ูุงุฑูุงู *ูุงููููุด ุงุณู ุนุฑุจู*. "+"\n"
        "4- ุงูุญุณุงุจ ููู ุฌุฏุงู ูููููุด ููู ููุง ูููู ุนุฑุจู."+"\n"
        "5- ูููู ููููุดู ุงูุญุณุงุจ ุงุณู ุงูุฏููู ุงุณุฑุงุฆูู ุจุงูุงูุฌููุฒู Israel ุฃู ุงุณุฑุงุฆูู ุจุงูุนุจุฑู: ืืฉืจืื "+"\n"
        " "+"\n"
        )
        context.bot.send_message(chat_id=update.effective_chat.id,text=voice_finished_message,  parse_mode= 'Markdown')
        time.sleep(1)
        voice_finished_message =(
        "6- ุงููุตู/ุงูุจูู: ูุชุงุฎุฏ ูู ุงูุงููุช ุตููููู ููุณ ุงู ุชููุชุฑุ ุจุณ ุฎูู ุจุงูู ุงูุช ุญุณุงุจู ูุงูููู (ุฐูุฑ ููุง ูุคูุซ) ุนุดุงู ุจุชูุฑู ูู ุงูุตูุงุบุฉุ ุงู ูููู ุชุฎูู ุงูุจูู ุงูุฌููุฒู."+"\n"
        " "+"\n"
        "๐ด ุงูู ุญุงุฌู ุงู *ุงูุงูููุช ูููู ูุชุณู ูุน ุจุนุถู* ูุด ูุชูุงูุถุุ ูุนูู ููุจูุงุด ุงุณู ุจูุช ู ุงููุตู ุดุงุจ ๐"+"\n"
        "ุงู ุตูุฑุฉ ุจูุช ุตุบูุฑุฉ ู ููุชูุจ ุงููุง ุงู ูุซูุง ุงู ุฌุฏุฉ.."+"\n"
        )
        context.bot.send_message(chat_id=update.effective_chat.id,text=voice_finished_message,  parse_mode= 'Markdown')
        time.sleep(1)
        voice_finished_message =(
        "ุจุนุฏ ูุง ุชุนูู ุงูุญุณุงุจ ุจุงูููุงุตูุงุช ุฏูุ ุงุจุนุช ุงูุฑุงุจุท ุจุชุงุนู ููุง ูุฑุฏ ุนูู ุงูุฑุณุงูู ุฏูุ"+"\n"
        "ููู ุนููุชู ุจุงููุนูุ ุฑุงุฌุนู ุงูุงูู ูุญุณู ููู ุจุญุณุจ ุงูููุงุตูุงุช ุฏูุ ูุงุจุนุช ุงูุฑุงุจุท ููุง"+"\n"
        " "+"\n"
        "*ุฑุงุจุท ูููุณ ุตูุฑุฉ ุดุงุดุฉ*"+"\n"
        )
        context.bot.send_message(chat_id=update.effective_chat.id,text=voice_finished_message,  parse_mode= 'Markdown')
        return GET_TWITTER_ACCOUNT
    else:
        update.message.reply_text(
            "ููุท ูุณููุญ ุจุฅุฑุณุงู ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ ูู ุงูุฑุฏ."
        )
        return GET_VOICE

# Define a function to cancel the conversation
def cancel(update: Update, context: CallbackContext) -> int:
    user = update.message.from_user
    update.message.reply_text(
        "The conversation has been canceled.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

def main() -> None:
    """Run the bot."""
    # Create the Updater and pass it your bot's token
    updater = Updater("6918060750:AAEUR6Jwoy9JxiEoDyIUyFEb45JR1jaDwhE")

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # Define conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GET_VOICE: [MessageHandler(Filters.all & ~Filters.command, get_voice)],
            GET_TWITTER_ACCOUNT: [MessageHandler(Filters.text & ~Filters.command, get_twitter_account)],
            BLOCKED: [MessageHandler(Filters.text & ~Filters.command, blocked_message_handler)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    # Register conversation handler
    dispatcher.add_handler(conv_handler)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C
    # updater.idle()

if __name__ == '__main__':
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)
